// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package model

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_v2 "github.com/xmidt-org/wrp-go/v2"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF85191 = 1
	codecSelferCcRAW5191  = 255
	// ----- value types used ----
	codecSelferValueTypeArray5191     = 10
	codecSelferValueTypeMap5191       = 9
	codecSelferValueTypeString5191    = 6
	codecSelferValueTypeInt5191       = 2
	codecSelferValueTypeUint5191      = 3
	codecSelferValueTypeFloat5191     = 4
	codecSelferValueTypeNil5191       = 1
	codecSelferBitsize5191            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil5191 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct5191 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer5191 struct{}

func codecSelfer5191False() bool { return false }

func init() {
	if codec1978.GenVersion != 16 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic("codecgen version mismatch: current: 16, need " + ver + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var _ pkg1_v2.Message
	}
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer5191
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [19]bool{    // should field at this index be written?
			true,             // Type
			true,             // Source
			true,             // Destination
			true,             // TransactionUUID
			true,             // ContentType
			true,             // Accept
			true,             // Status
			true,             // RequestDeliveryResponse
			true,             // Headers
			true,             // Metadata
			true,             // Spans
			true,             // IncludeSpans
			true,             // Path
			true,             // Payload
			true,             // ServiceName
			true,             // URL
			true,             // PartnerIDs
			true,             // SessionID
			x.BirthDate != 0, // BirthDate
		}
		_ = yyq2
		var yyn9 bool = x.Message.Status == nil
		var yyn10 bool = x.Message.RequestDeliveryResponse == nil
		var yyn14 bool = x.Message.IncludeSpans == nil
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(19)
			z.EncWriteArrayElem()
			if yyxt22 := z.Extension(z.I2Rtid(x.Message.Type)); yyxt22 != nil {
				z.EncExtension(x.Message.Type, yyxt22)
			} else {
				r.EncodeInt(int64(x.Message.Type))
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.Source))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.Destination))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.TransactionUUID))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.ContentType))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.Accept))
			if yyn9 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy28 := *x.Message.Status
				r.EncodeInt(int64(yy28))
			}
			if yyn10 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy30 := *x.Message.RequestDeliveryResponse
				r.EncodeInt(int64(yy30))
			}
			z.EncWriteArrayElem()
			if x.Message.Headers == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Message.Headers, e)
			} // end block: if x.Message.Headers slice == nil
			z.EncWriteArrayElem()
			if x.Message.Metadata == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringStringV(x.Message.Metadata, e)
			} // end block: if x.Message.Metadata map == nil
			z.EncWriteArrayElem()
			if x.Message.Spans == nil {
				r.EncodeNil()
			} else {
				h.encSliceSlicestring(([][]string)(x.Message.Spans), e)
			} // end block: if x.Message.Spans slice == nil
			if yyn14 {
				z.EncWriteArrayElem()
				r.EncodeNil()
			} else {
				z.EncWriteArrayElem()
				yy35 := *x.Message.IncludeSpans
				r.EncodeBool(bool(yy35))
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.Path))
			z.EncWriteArrayElem()
			if x.Message.Payload == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Message.Payload))
			} // end block: if x.Message.Payload slice == nil
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.ServiceName))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.URL))
			z.EncWriteArrayElem()
			if x.Message.PartnerIDs == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Message.PartnerIDs, e)
			} // end block: if x.Message.PartnerIDs slice == nil
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Message.SessionID))
			z.EncWriteArrayElem()
			if yyq2[18] {
				r.EncodeInt(int64(x.BirthDate))
			} else {
				r.EncodeInt(0)
			}
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Type\"")
			} else {
				r.EncodeString(`Type`)
			}
			z.EncWriteMapElemValue()
			if yyxt44 := z.Extension(z.I2Rtid(x.Message.Type)); yyxt44 != nil {
				z.EncExtension(x.Message.Type, yyxt44)
			} else {
				r.EncodeInt(int64(x.Message.Type))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Source\"")
			} else {
				r.EncodeString(`Source`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.Source))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Destination\"")
			} else {
				r.EncodeString(`Destination`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.Destination))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"TransactionUUID\"")
			} else {
				r.EncodeString(`TransactionUUID`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.TransactionUUID))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ContentType\"")
			} else {
				r.EncodeString(`ContentType`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.ContentType))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Accept\"")
			} else {
				r.EncodeString(`Accept`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.Accept))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Status\"")
			} else {
				r.EncodeString(`Status`)
			}
			z.EncWriteMapElemValue()
			if yyn9 {
				r.EncodeNil()
			} else {
				yy50 := *x.Message.Status
				r.EncodeInt(int64(yy50))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"RequestDeliveryResponse\"")
			} else {
				r.EncodeString(`RequestDeliveryResponse`)
			}
			z.EncWriteMapElemValue()
			if yyn10 {
				r.EncodeNil()
			} else {
				yy52 := *x.Message.RequestDeliveryResponse
				r.EncodeInt(int64(yy52))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Headers\"")
			} else {
				r.EncodeString(`Headers`)
			}
			z.EncWriteMapElemValue()
			if x.Message.Headers == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Message.Headers, e)
			} // end block: if x.Message.Headers slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Metadata\"")
			} else {
				r.EncodeString(`Metadata`)
			}
			z.EncWriteMapElemValue()
			if x.Message.Metadata == nil {
				r.EncodeNil()
			} else {
				z.F.EncMapStringStringV(x.Message.Metadata, e)
			} // end block: if x.Message.Metadata map == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Spans\"")
			} else {
				r.EncodeString(`Spans`)
			}
			z.EncWriteMapElemValue()
			if x.Message.Spans == nil {
				r.EncodeNil()
			} else {
				h.encSliceSlicestring(([][]string)(x.Message.Spans), e)
			} // end block: if x.Message.Spans slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"IncludeSpans\"")
			} else {
				r.EncodeString(`IncludeSpans`)
			}
			z.EncWriteMapElemValue()
			if yyn14 {
				r.EncodeNil()
			} else {
				yy57 := *x.Message.IncludeSpans
				r.EncodeBool(bool(yy57))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Path\"")
			} else {
				r.EncodeString(`Path`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.Path))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Payload\"")
			} else {
				r.EncodeString(`Payload`)
			}
			z.EncWriteMapElemValue()
			if x.Message.Payload == nil {
				r.EncodeNil()
			} else {
				r.EncodeStringBytesRaw([]byte(x.Message.Payload))
			} // end block: if x.Message.Payload slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ServiceName\"")
			} else {
				r.EncodeString(`ServiceName`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.ServiceName))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"URL\"")
			} else {
				r.EncodeString(`URL`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.URL))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"PartnerIDs\"")
			} else {
				r.EncodeString(`PartnerIDs`)
			}
			z.EncWriteMapElemValue()
			if x.Message.PartnerIDs == nil {
				r.EncodeNil()
			} else {
				z.F.EncSliceStringV(x.Message.PartnerIDs, e)
			} // end block: if x.Message.PartnerIDs slice == nil
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"SessionID\"")
			} else {
				r.EncodeString(`SessionID`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Message.SessionID))
			if yyq2[18] {
				z.EncWriteMapElemKey()
				r.EncodeString(`birth_date`)
				z.EncWriteMapElemValue()
				r.EncodeInt(int64(x.BirthDate))
			}
			z.EncWriteMapEnd()
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer5191
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil5191 {
		*(x) = Event{}
	} else if yyct2 == codecSelferValueTypeMap5191 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray5191 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct5191)
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer5191
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "Type":
			if yyxt5 := z.Extension(z.I2Rtid(x.Message.Type)); yyxt5 != nil {
				z.DecExtension(x.Message.Type, yyxt5)
			} else {
				x.Message.Type = (pkg1_v2.MessageType)(r.DecodeInt64())
			}
		case "Source":
			x.Message.Source = (string)(string(r.DecodeStringAsBytes()))
		case "Destination":
			x.Message.Destination = (string)(string(r.DecodeStringAsBytes()))
		case "TransactionUUID":
			x.Message.TransactionUUID = (string)(string(r.DecodeStringAsBytes()))
		case "ContentType":
			x.Message.ContentType = (string)(string(r.DecodeStringAsBytes()))
		case "Accept":
			x.Message.Accept = (string)(string(r.DecodeStringAsBytes()))
		case "Status":
			if r.TryNil() {
				if x.Message.Status != nil { // remove the if-true
					x.Message.Status = nil
				}
			} else {
				if x.Message.Status == nil {
					x.Message.Status = new(int64)
				}
				*x.Message.Status = (int64)(r.DecodeInt64())
			}
		case "RequestDeliveryResponse":
			if r.TryNil() {
				if x.Message.RequestDeliveryResponse != nil { // remove the if-true
					x.Message.RequestDeliveryResponse = nil
				}
			} else {
				if x.Message.RequestDeliveryResponse == nil {
					x.Message.RequestDeliveryResponse = new(int64)
				}
				*x.Message.RequestDeliveryResponse = (int64)(r.DecodeInt64())
			}
		case "Headers":
			z.F.DecSliceStringX(&x.Message.Headers, d)
		case "Metadata":
			z.F.DecMapStringStringX(&x.Message.Metadata, d)
		case "Spans":
			h.decSliceSlicestring((*[][]string)(&x.Message.Spans), d)
		case "IncludeSpans":
			if r.TryNil() {
				if x.Message.IncludeSpans != nil { // remove the if-true
					x.Message.IncludeSpans = nil
				}
			} else {
				if x.Message.IncludeSpans == nil {
					x.Message.IncludeSpans = new(bool)
				}
				*x.Message.IncludeSpans = (bool)(r.DecodeBool())
			}
		case "Path":
			x.Message.Path = (string)(string(r.DecodeStringAsBytes()))
		case "Payload":
			x.Message.Payload = r.DecodeBytes(([]byte)(x.Message.Payload), false)
		case "ServiceName":
			x.Message.ServiceName = (string)(string(r.DecodeStringAsBytes()))
		case "URL":
			x.Message.URL = (string)(string(r.DecodeStringAsBytes()))
		case "PartnerIDs":
			z.F.DecSliceStringX(&x.Message.PartnerIDs, d)
		case "SessionID":
			x.Message.SessionID = (string)(string(r.DecodeStringAsBytes()))
		case "birth_date":
			x.BirthDate = (int64)(r.DecodeInt64())
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer5191
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj32 int
	var yyb32 bool
	var yyhl32 bool = l >= 0
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if yyxt34 := z.Extension(z.I2Rtid(x.Message.Type)); yyxt34 != nil {
		z.DecExtension(x.Message.Type, yyxt34)
	} else {
		x.Message.Type = (pkg1_v2.MessageType)(r.DecodeInt64())
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.Source = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.Destination = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.TransactionUUID = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.ContentType = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.Accept = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Message.Status != nil { // remove the if-true
			x.Message.Status = nil
		}
	} else {
		if x.Message.Status == nil {
			x.Message.Status = new(int64)
		}
		*x.Message.Status = (int64)(r.DecodeInt64())
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Message.RequestDeliveryResponse != nil { // remove the if-true
			x.Message.RequestDeliveryResponse = nil
		}
	} else {
		if x.Message.RequestDeliveryResponse == nil {
			x.Message.RequestDeliveryResponse = new(int64)
		}
		*x.Message.RequestDeliveryResponse = (int64)(r.DecodeInt64())
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Message.Headers, d)
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecMapStringStringX(&x.Message.Metadata, d)
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	h.decSliceSlicestring((*[][]string)(&x.Message.Spans), d)
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	if r.TryNil() {
		if x.Message.IncludeSpans != nil { // remove the if-true
			x.Message.IncludeSpans = nil
		}
	} else {
		if x.Message.IncludeSpans == nil {
			x.Message.IncludeSpans = new(bool)
		}
		*x.Message.IncludeSpans = (bool)(r.DecodeBool())
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.Path = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.Payload = r.DecodeBytes(([]byte)(x.Message.Payload), false)
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.ServiceName = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.URL = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	z.F.DecSliceStringX(&x.Message.PartnerIDs, d)
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Message.SessionID = (string)(string(r.DecodeStringAsBytes()))
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = z.DecCheckBreak()
	}
	if yyb32 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.BirthDate = (int64)(r.DecodeInt64())
	for {
		yyj32++
		if yyhl32 {
			yyb32 = yyj32 > l
		} else {
			yyb32 = z.DecCheckBreak()
		}
		if yyb32 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj32-1, "")
	}
}

func (x codecSelfer5191) encSliceSlicestring(v [][]string, e *codec1978.Encoder) {
	var h codecSelfer5191
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			z.F.EncSliceStringV(yyv1, e)
		} // end block: if yyv1 slice == nil
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer5191) decSliceSlicestring(v *[][]string, d *codec1978.Decoder) {
	var h codecSelfer5191
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = [][]string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([][]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([][]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				z.F.DecSliceStringX(&yyv1[yyj1], d)
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([][]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer5191) encSlicestring(v []string, e *codec1978.Encoder) {
	var h codecSelfer5191
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if v == nil {
		r.EncodeNil()
		return
	}
	z.EncWriteArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncWriteArrayElem()
		r.EncodeString(string(yyv1))
	}
	z.EncWriteArrayEnd()
}

func (x codecSelfer5191) decSlicestring(v *[]string, d *codec1978.Decoder) {
	var h codecSelfer5191
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyh1.IsNil {
		if yyv1 != nil {
			yyv1 = nil
			yyc1 = true
		}
	} else if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		for yyj1 = 0; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || z.DecCheckBreak()); yyj1++ { // bounds-check-elimination
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true
			}
			if yydb1 {
				z.DecSwallow()
			} else {
				yyv1[yyj1] = (string)(string(r.DecodeStringAsBytes()))
			}
		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
